---
title: "GEMS Telemetry"
format: html
editor: source
echo: false
params:
  start_date: 2025-06-23
---

Get and parse data sent to GEMS website. Data from `r params$start_date` to present.

```{r}
#| warning: false
#| message: false

library(tidyverse)
library(lubridate)
library(gemstools)
library(patchwork)
library(plotly)

theme_set(theme_bw())
options(digits.secs=3)
```

# Get Data

Get data from website. 

Use `start_date` parameter to limit download.

```{r}
df_raw <- lecs_read_web(start_date = params$start_date, base_url = "https://gems.whoi.edu/GEMS_data/?timestamp=") |> 
  filter(!str_detect(X1, "\\?[01]"),
         !str_detect(X1, "V:"))
```

Add row, type, send and line number

```{r}
df <- lecs_add_metadata(df_raw)
```

Separate data into post times, met, status, and adv data

```{r}
post_times <- lecs_post_times(df) 
rga <- gems_rga_data(df)
status <- lecs_status_data(df)
adv_data <- lecs_adv_data(df)
turbo <- gems_turbo_status(df)
temp <- gems_temp_data(df)
```

reshape rga data

```{r}
rga <- rga |> 
  mutate(mass = as.factor(mass),
         current = current*1E-16,
         pressure = current/0.0801)

# Add inlet column to rga_wide
rga_wide <- rga |> 
  group_by(send) |> 
  mutate(cycle = cumsum(mass == 18)) %>% 
  group_by(send, cycle) %>% 
  mutate(cycle_ts = mean(timestamp)) %>% 
  ungroup() %>% 
  select(send, timestamp = cycle_ts, mass, pressure) %>% 
  pivot_wider(names_from = mass, names_prefix = "mass_",
              values_from = pressure,
              values_fn = mean) %>%
  mutate(
    # Calculate minutes since the hour
    min_since_hour = as.numeric(difftime(timestamp, floor_date(timestamp, "hour"), units = "mins")),
    # Determine inlet state: "low" for first 7.5 min, then alternate every 7.5 min
    inlet = ifelse(floor(min_since_hour / 7.5) %% 2 == 0, "low", "high")
  )
```

Filter bad data before timestamping adv data

```{r}
status_qc <- status |> 
  filter(soundspeed > 1450, 
         soundspeed < 2000,
         adv_day < 32, adv_month > 0, adv_month < 13, 
         adv_min < 61, adv_hour < 24, adv_year < 100,
         timestamp > "2023-01-01",
         timestamp < "2025-10-01",
         bat < 20,
         bat > 0,
  ) |> 
  mutate(orig_timestamp = timestamp,
         lander_timestamp_cor = correct_status_timestamp_jitter(orig_timestamp, adv_timestamp),
         adv_timestamp_cor = correct_status_timestamp_adv(orig_timestamp, adv_timestamp),
         timestamp = lander_timestamp_cor)

adv_data_qc <- adv_data |> 
  filter(count >= 0, count < 256, 
         pressure > -10,
         pressure < 10,
         ana_in < 1,
         ana_in > -1,
         ana_in2 < 1,
         ana_in2 > -1,)
```

```{r}
adv_data_qc <- adv_data_qc |> 
  make_lecs_ts(status_qc) |> 
  mutate(missing = lecs_missing(count, line))

```

Calculate per-send means

```{r}
status_mean <- status_qc |> 
  select(send, timestamp, bat, heading, pitch, roll) |> 
  group_by(send) |> 
  summarise(across(c(timestamp, bat, heading, pitch, roll), 
                   list(mean = ~ mean(.x, na.rm = TRUE), 
                        sd = ~ sd(.x, na.rm = TRUE))))

temp_mean <- temp |> 
  group_by(send) |>
  summarise(across(everything(), 
                   list(mean = ~ mean(.x, na.rm = TRUE), 
                        sd = ~ sd(.x, na.rm = TRUE))))

turbo_mean <- turbo |> 
  select(send, timestamp, speed, power, voltage, e_temp, p_temp, m_temp, filament) |> 
  group_by(send) |> 
  summarise(across(everything(), 
                   list(mean = ~ mean(.x, na.rm = TRUE), 
                        sd = ~ sd(.x, na.rm = TRUE))))

rga_mean <- rga_wide |> 
  group_by(send) |> 
  summarise(across(everything(),
                   list(mean = ~ mean(.x, na.rm = TRUE), 
                        sd = ~ sd(.x, na.rm = TRUE))))

adv_data_mean <- adv_data_qc |> 
  select(send, missing, timestamp, 
         pressure,
         u, v, w, 
         amp1, amp2, amp3,
         corr1, corr2, corr3) |> 
  group_by(send) |> 
  summarise(across(everything(), 
                   list(mean = ~ mean(.x, na.rm = TRUE), 
                        sd = ~ sd(.x, na.rm = TRUE))),
            missing_frac = sum(missing, na.rm = TRUE) / (sum(missing, na.rm = TRUE) + n()),
            N = n())
```

## Status

#### Last post was `r max(post_times$timestamp, na.rm = TRUE)`

How many status lines are in the wrong year?

```{r}
ct <- post_times |> 
  select(post_time = timestamp, send)

dt <- status |> 
  select(send, lander_time = timestamp) |> 
  inner_join(ct) |> 
  mutate(td = as.numeric(difftime(post_time, lander_time, units = 'secs'))) |> 
  filter(td < 0 | td > 600) 

if (nrow(dt > 0)) {
  dt |> 
    ggplot(aes(post_time, lander_time)) +
    geom_point() + 
    scale_x_datetime(date_labels = "%Y-%m-%d") +
    ggtitle("Incorrect Lander timestamps")
} else {
  "No incorrect lander timestamps!"
}
```
### Teensy Temp

Junction temp of Surface teensy. Runs at 50C at room temp. >95C kills teensies.

```{r}
temp_mean |> 
  plot_mean(temp_mean, temp_sd) +
  geom_smooth() +
  labs(title = "Teensy temperature",
       y = "Degrees C")
```


### Battery

```{r}
adv_bat <- status_mean |> 
  plot_mean(bat_mean, bat_sd) +
  geom_smooth() +
  labs(title = "ADV Voltage (nom: 12V)",
       y = "Volts")
turbo_bat <- turbo_mean |> 
  plot_mean(voltage_mean, voltage_sd) +
  geom_smooth() +
  labs(title = "Turbo Voltage (nom: 24V)",
       y = "Volts")
adv_bat / turbo_bat
```

### Turbo

```{r}
turbo_s <- turbo_mean |> 
  plot_mean(speed_mean, speed_sd) +
  geom_smooth() +
  labs(title = "Turbo speed",
       y = "Hz")
turbo_p <- turbo_mean |>
  plot_mean(power_mean, power_sd) +
  geom_smooth() +
  labs(title = "Turbo power",
       y = "W")
turbo_s / turbo_p
```

```{r}
turbo_mean |> 
  select(timestamp_mean, e_temp_mean, p_temp_mean, m_temp_mean) |> 
  pivot_longer(ends_with("temp_mean")) |>
  ggplot(aes(timestamp_mean, value, color = name)) +
  geom_smooth(aes(timestamp_mean, value), se = FALSE) +
  geom_smooth(aes(timestamp_mean, value, color = NULL)) +
  geom_point() +
  labs(title = "Turbo temperature",
       x = NULL,
       y = "Degrees C")
  
```

## RGA

```{r}
rga_mean |> 
  select(timestamp_mean, mass_18_mean, mass_28_mean, mass_40_mean) |> 
  pivot_longer(starts_with("mass")) |>
  ggplot(aes(timestamp_mean, value, color = name)) +
  geom_smooth(aes(timestamp_mean, value), se = FALSE) +
  geom_smooth(aes(timestamp_mean, value, color = NULL)) +
  geom_point() +
  labs(title = "RGA",
       x = NULL,
       y = "Pressure (Torr)")
```

### Oxygen

```{r}
gg <- rga_wide |> 
  filter(mass_32 < 2e-9) |> 
  select(timestamp,mass_32, inlet) |> 
  pivot_longer(starts_with("mass")) |>
  ggplot(aes(timestamp, value, color = inlet)) +
  #geom_smooth(aes(timestamp, value), se = FALSE) +
  geom_line(linewidth = .5) +
  geom_point(size = .5) +
  labs(title = "RGA",
       x = NULL,
       y = "Pressure (Torr)")

ggplotly(gg)
```

### Carbon dioxide

```{r}
gg <- rga_wide |> 
  filter(mass_44 < 1e-10) |> 
  select(timestamp,mass_44, inlet) |> 
  pivot_longer(starts_with("mass")) |>
  ggplot(aes(timestamp, value, color = inlet)) +
  geom_smooth(aes(timestamp, value), se = FALSE) +
  geom_point(size = .5) +
  labs(title = "CO2",
       x = NULL,
       y = "Pressure (Torr)")

ggplotly(gg)
```

### Methane

```{r}
gg <- rga_wide |> 
  filter(mass_44 < 1e-10) |> 
  select(timestamp,mass_16, inlet) |> 
  pivot_longer(starts_with("mass")) |>
  ggplot(aes(timestamp, value, color = inlet)) +
  geom_smooth(aes(timestamp, value), se = FALSE) +
  geom_point(size = .5) +
  labs(title = "CO2",
       x = NULL,
       y = "Pressure (Torr)")

ggplotly(gg)
```

### Hydrogen sulphide

```{r}
gg <- rga_wide |> 
  filter(mass_44 < 1e-10) |> 
  select(timestamp,mass_34, inlet) |> 
  pivot_longer(starts_with("mass")) |>
  ggplot(aes(timestamp, value, color = inlet)) +
  geom_smooth(aes(timestamp, value), se = FALSE) +
  geom_point(size = .5) +
  labs(title = "CO2",
       x = NULL,
       y = "Pressure (Torr)")

ggplotly(gg)
```

## ADV

### Pressure/Depth

```{r}
adv_data_mean |> 
  plot_mean(pressure_mean, pressure_sd) +
  scale_y_reverse() +
  labs(title = "Pressure",
       y = "Pressure (dbar)")
```

### ADV Correlation

```{r}
adv_data_mean |> 
  select(timestamp_mean, corr1_mean, corr2_mean, corr3_mean) |> 
  pivot_longer(starts_with("corr")) |>
  ggplot(aes(timestamp_mean, value, color = name)) +
  geom_smooth(aes(timestamp_mean, value), se = FALSE) +
  geom_smooth(aes(timestamp_mean, value, color = NULL)) +
  geom_point() +
  labs(title = "ADV correlation",
       x = NULL,
       y = "Correlation (%)")
```

### ADV Amplitude

```{r}
adv_data_mean |> 
  select(timestamp_mean, amp1_mean, amp2_mean, amp3_mean) |> 
  pivot_longer(starts_with("amp")) |>
  ggplot(aes(timestamp_mean, value, color = name)) +
  geom_smooth(aes(timestamp_mean, value), se = FALSE) +
  geom_smooth(aes(timestamp_mean, value, color = NULL)) +
  geom_point() +
  labs(title = "ADV amplitude",
       x = NULL,
       y = "Amplitude")
```

### ADV Vertical Velocity

```{r}
adv_data_mean |> 
  plot_mean(w_mean, w_sd) +
  ylim(-0.1, 0.1) +
  labs(title = "Vertical velocity",
       y = "cm/s")
```

### ADV Alongshore Velocity

ADV set up with x axis parallel to shore. Positive is North.

```{r}
adv_data_mean |> 
  plot_mean(u_mean, u_sd) +
  ylim(-0.5, 0.5) +
  labs(title = "Alongshore velocity",
       y = "cm/s")
```

### ADV Onshore velocity

Positive is offshore

```{r}
adv_data_mean |> 
  plot_mean(v_mean, v_sd) +
  ylim(-0.5, 0.5) +
  labs(title = "Onshore velocity",
       y = "cm/s")
```

## IMU data

```{r}
hp <- status_mean |> 
  plot_mean(heading_mean, heading_sd) +
  geom_smooth() +
  labs(title = "Heading",
       y = "Degrees")

pp <- status_mean |> 
  plot_mean(pitch_mean, pitch_sd) +
  geom_smooth() +
  labs(title = "Pitch",
       y = "Degrees")

rp <- status_mean |> 
  plot_mean(roll_mean, roll_sd) +
  geom_smooth() +
  labs(title = "Roll",
       y = "Degrees")

hp / pp / rp
```

## Data issues

#### Bad Packets

Garbled status or data packets. These need to be filtered out before timestamping.
These should be caught on the lander by adding a checksum. 
Also need to check whether data is corrupted from ADV-lander, lander-surface, 
or surface-web.

#### Out of order packets

Not sure what causes this. Happening on the server side.
Maybe parallel processing of POST requests?
Handled by sorting each send by packet number.

#### Missing data

Missing data includes bad packets. Need to separate out.


```{r}
adv_missing <- adv_data_qc |> 
  select(send, missing) |> 
  inner_join(post_times) |> 
  filter(!is.na(missing)) |> 
  group_by(send, timestamp) |> 
  summarise(missing_frac = sum(missing) / (sum(missing) + n()),
            N = n())

adv_missing |> 
  ggplot(aes(timestamp, missing_frac)) +
  geom_point() +
  labs(title = "Fraction missing by send",
       x = NULL,
       y = "Fraction missing")
```

### Post times

```{r}

post_times |>
  tail(20) |>
  knitr::kable()
```

### Lines per post

```{r}
post_times |> 
  ggplot(aes(timestamp, row_count)) +
  geom_point() +
  labs(title = "Lines per post",
       x = NULL,
       y = "Lines")
```
