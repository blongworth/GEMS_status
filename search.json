[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Parse LECS Web",
    "section": "",
    "text": "Get and parse data sent to LECS website. Data from 2025-06-24 to present.\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(gemstools)\nlibrary(patchwork)\nlibrary(plotly)\n\ntheme_set(theme_bw())\noptions(digits.secs=3)"
  },
  {
    "objectID": "index.html#status",
    "href": "index.html#status",
    "title": "Parse LECS Web",
    "section": "Status",
    "text": "Status\n\nLast post was 2025-07-01 16:20:25\nHow many status lines are in the wrong year?\n\nct &lt;- post_times |&gt; \n  select(post_time = timestamp, send)\n\ndt &lt;- status |&gt; \n  select(send, lander_time = timestamp) |&gt; \n  inner_join(ct) |&gt; \n  mutate(td = as.numeric(difftime(post_time, lander_time, units = 'secs'))) |&gt; \n  filter(td &lt; 0 | td &gt; 600) \n\nJoining with `by = join_by(send)`\n\nif (nrow(dt &gt; 0)) {\n  dt |&gt; \n    ggplot(aes(post_time, lander_time)) +\n    geom_point() + \n    scale_x_datetime(date_labels = \"%Y-%m-%d\") +\n    ggtitle(\"Incorrect Lander timestamps\")\n} else {\n  \"No incorrect lander timestamps!\"\n}\n\n\n\n\n\n\n\n\n\n\nTeensy Temp\nJunction temp of Surface teensy. Runs at 50C at room temp. &gt;95C kills teensies.\n\ntemp_mean |&gt; \n  plot_mean(temp_mean, temp_sd) +\n  geom_smooth() +\n  labs(title = \"Teensy temperature\",\n       y = \"Degrees C\")\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\nWarning: Removed 142 rows containing missing values or values outside the scale range\n(`geom_segment()`).\n\n\n\n\n\n\n\n\n\n\n\nBattery\n\nadv_bat &lt;- status_mean |&gt; \n  plot_mean(bat_mean, bat_sd) +\n  geom_smooth() +\n  labs(title = \"ADV Voltage (nom: 12V)\",\n       y = \"Volts\")\nturbo_bat &lt;- turbo_mean |&gt; \n  plot_mean(voltage_mean, voltage_sd) +\n  geom_smooth() +\n  labs(title = \"Turbo Voltage (nom: 24V)\",\n       y = \"Volts\")\nadv_bat / turbo_bat\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_segment()`).\n\n\n\n\n\n\n\n\n\n\n\nTurbo\n\nturbo_s &lt;- turbo_mean |&gt; \n  plot_mean(speed_mean, speed_sd) +\n  geom_smooth() +\n  labs(title = \"Turbo speed\",\n       y = \"Hz\")\nturbo_p &lt;- turbo_mean |&gt;\n  plot_mean(power_mean, power_sd) +\n  geom_smooth() +\n  labs(title = \"Turbo power\",\n       y = \"W\")\nturbo_s / turbo_p\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\nWarning: Failed to fit group -1.\nCaused by error in `gam.reparam()`:\n! NA/NaN/Inf in foreign function call (arg 3)\n\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_segment()`).\n\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_segment()`).\n\n\n\n\n\n\n\n\n\n\nturbo_mean |&gt; \n  select(timestamp_mean, e_temp_mean, p_temp_mean, m_temp_mean) |&gt; \n  pivot_longer(ends_with(\"temp_mean\")) |&gt;\n  ggplot(aes(timestamp_mean, value, color = name)) +\n  geom_smooth(aes(timestamp_mean, value), se = FALSE) +\n  geom_smooth(aes(timestamp_mean, value, color = NULL)) +\n  geom_point() +\n  labs(title = \"Turbo temperature\",\n       x = NULL,\n       y = \"Degrees C\")\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'"
  },
  {
    "objectID": "index.html#rga",
    "href": "index.html#rga",
    "title": "Parse LECS Web",
    "section": "RGA",
    "text": "RGA\n\nrga_mean |&gt; \n  select(timestamp_mean, mass_18_mean, mass_28_mean, mass_40_mean) |&gt; \n  pivot_longer(starts_with(\"mass\")) |&gt;\n  ggplot(aes(timestamp_mean, value, color = name)) +\n  geom_smooth(aes(timestamp_mean, value), se = FALSE) +\n  geom_smooth(aes(timestamp_mean, value, color = NULL)) +\n  geom_point() +\n  labs(title = \"RGA\",\n       x = NULL,\n       y = \"Pressure (Torr)\")\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\n\ngg &lt;- rga_wide |&gt; \n  filter(mass_32 &lt; 2e-9) |&gt; \n  select(timestamp,mass_32, inlet) |&gt; \n  pivot_longer(starts_with(\"mass\")) |&gt;\n  ggplot(aes(timestamp, value, color = inlet)) +\n  #geom_smooth(aes(timestamp, value), se = FALSE) +\n  geom_line(linewidth = .5) +\n  geom_point(size = .5) +\n  labs(title = \"RGA\",\n       x = NULL,\n       y = \"Pressure (Torr)\")\n\nggplotly(gg)\n\n\n\n\n\n\ngg &lt;- rga_wide |&gt; \n  filter(mass_44 &lt; 1e-10) |&gt; \n  select(timestamp,mass_44) |&gt; \n  pivot_longer(starts_with(\"mass\")) |&gt;\n  ggplot(aes(timestamp, value, color = name)) +\n  geom_smooth(aes(timestamp, value), se = FALSE) +\n  geom_point(size = .5) +\n  labs(title = \"CO2\",\n       x = NULL,\n       y = \"Pressure (Torr)\")\n\nggplotly(gg)\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'"
  },
  {
    "objectID": "index.html#adv",
    "href": "index.html#adv",
    "title": "Parse LECS Web",
    "section": "ADV",
    "text": "ADV\n\nPressure/Depth\n\nadv_data_mean |&gt; \n  plot_mean(pressure_mean, pressure_sd) +\n  scale_y_reverse() +\n  labs(title = \"Pressure\",\n       y = \"Pressure (dbar)\")\n\n\n\n\n\n\n\n\n\n\nADV Correlation\n\nadv_data_mean |&gt; \n  select(timestamp_mean, corr1_mean, corr2_mean, corr3_mean) |&gt; \n  pivot_longer(starts_with(\"corr\")) |&gt;\n  ggplot(aes(timestamp_mean, value, color = name)) +\n  geom_smooth(aes(timestamp_mean, value), se = FALSE) +\n  geom_smooth(aes(timestamp_mean, value, color = NULL)) +\n  geom_point() +\n  labs(title = \"ADV correlation\",\n       x = NULL,\n       y = \"Correlation (%)\")\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\n\n\nADV Amplitude\n\nadv_data_mean |&gt; \n  select(timestamp_mean, amp1_mean, amp2_mean, amp3_mean) |&gt; \n  pivot_longer(starts_with(\"amp\")) |&gt;\n  ggplot(aes(timestamp_mean, value, color = name)) +\n  geom_smooth(aes(timestamp_mean, value), se = FALSE) +\n  geom_smooth(aes(timestamp_mean, value, color = NULL)) +\n  geom_point() +\n  labs(title = \"ADV amplitude\",\n       x = NULL,\n       y = \"Amplitude\")\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\n\n\n\nADV Vertical Velocity\n\nadv_data_mean |&gt; \n  plot_mean(w_mean, w_sd) +\n  ylim(-0.1, 0.1) +\n  labs(title = \"Vertical velocity\",\n       y = \"cm/s\")\n\nWarning: Removed 3 rows containing missing values or values outside the scale range\n(`geom_pointrange()`).\n\n\nWarning: Removed 100 rows containing missing values or values outside the scale range\n(`geom_segment()`).\n\n\n\n\n\n\n\n\n\n\n\nADV Onshore Velocity\nPositive is towards shore ADV set up with x axis towards shore as of 2024-03-07, unsure earlier\n\nadv_data_mean |&gt; \n  plot_mean(u_mean, u_sd) +\n  ylim(-0.5, 0.5) +\n  labs(title = \"Onshore velocity\",\n       y = \"cm/s\")\n\nWarning: Removed 8 rows containing missing values or values outside the scale range\n(`geom_segment()`).\n\n\n\n\n\n\n\n\n\n\n\nADV Alongshore velocity\nPositive is southerly current\n\nadv_data_mean |&gt; \n  plot_mean(v_mean, v_sd) +\n  ylim(-0.5, 0.5) +\n  labs(title = \"Alongshore velocity\",\n       y = \"cm/s\")\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_segment()`)."
  },
  {
    "objectID": "index.html#imu-data",
    "href": "index.html#imu-data",
    "title": "Parse LECS Web",
    "section": "IMU data",
    "text": "IMU data\n\nhp &lt;- status_mean |&gt; \n  plot_mean(heading_mean, heading_sd) +\n  geom_smooth() +\n  labs(title = \"Heading\",\n       y = \"Degrees\")\n\npp &lt;- status_mean |&gt; \n  plot_mean(pitch_mean, pitch_sd) +\n  geom_smooth() +\n  labs(title = \"Pitch\",\n       y = \"Degrees\")\n\nrp &lt;- status_mean |&gt; \n  plot_mean(roll_mean, roll_sd) +\n  geom_smooth() +\n  labs(title = \"Roll\",\n       y = \"Degrees\")\n\nhp / pp / rp\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\nWarning: Failed to fit group -1.\nCaused by error in `gam.reparam()`:\n! NA/NaN/Inf in foreign function call (arg 3)\n\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'"
  },
  {
    "objectID": "index.html#data-issues",
    "href": "index.html#data-issues",
    "title": "Parse LECS Web",
    "section": "Data issues",
    "text": "Data issues\n\nBad Packets\nGarbled status or data packets. These need to be filtered out before timestamping. These should be caught on the lander by adding a checksum. Also need to check whether data is corrupted from ADV-lander, lander-surface, or surface-web.\n\n\nOut of order packets\nNot sure what causes this. Happening on the server side. Maybe parallel processing of POST requests? Handled by sorting each send by packet number.\n\n\nMissing data\nMissing data includes bad packets. Need to separate out.\n\nadv_missing &lt;- adv_data_qc |&gt; \n  select(send, missing) |&gt; \n  inner_join(post_times) |&gt; \n  filter(!is.na(missing)) |&gt; \n  group_by(send, timestamp) |&gt; \n  summarise(missing_frac = sum(missing) / (sum(missing) + n()),\n            N = n())\n\nJoining with `by = join_by(send)`\n`summarise()` has grouped output by 'send'. You can override using the\n`.groups` argument.\n\nadv_missing |&gt; \n  ggplot(aes(timestamp, missing_frac)) +\n  geom_point() +\n  labs(title = \"Fraction missing by send\",\n       x = NULL,\n       y = \"Fraction missing\")\n\n\n\n\n\n\n\n\n\n\nPost times\n\npost_times |&gt;\n  tail(20) |&gt;\n  knitr::kable()\n\n\n\n\ntimestamp\nsend\nrow_count\n\n\n\n\n2025-07-01 13:10:25\n1086\n500\n\n\n2025-07-01 13:20:24\n1087\n500\n\n\n2025-07-01 13:30:25\n1088\n500\n\n\n2025-07-01 13:40:00\n1089\n500\n\n\n2025-07-01 13:50:25\n1090\n500\n\n\n2025-07-01 14:00:25\n1091\n500\n\n\n2025-07-01 14:10:25\n1092\n500\n\n\n2025-07-01 14:20:25\n1093\n500\n\n\n2025-07-01 14:30:24\n1094\n500\n\n\n2025-07-01 14:40:25\n1095\n500\n\n\n2025-07-01 14:50:24\n1096\n500\n\n\n2025-07-01 15:00:25\n1097\n500\n\n\n2025-07-01 15:10:25\n1098\n500\n\n\n2025-07-01 15:20:25\n1099\n500\n\n\n2025-07-01 15:30:25\n1100\n500\n\n\n2025-07-01 15:40:26\n1101\n500\n\n\n2025-07-01 15:50:24\n1102\n500\n\n\n2025-07-01 16:00:25\n1103\n500\n\n\n2025-07-01 16:10:25\n1104\n499\n\n\n2025-07-01 16:20:25\n1105\n500\n\n\n\n\n\n\n\nLines per post\n\npost_times |&gt; \n  ggplot(aes(timestamp, row_count)) +\n  geom_point() +\n  labs(title = \"Lines per post\",\n       x = NULL,\n       y = \"Lines\")\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`)."
  }
]